LeetCode 150 sheet discussion:

1. Merge Sorted Array :

	There is a merge function in STL which merges two vectors in sorted order (but in the original vector needed space should be there).
	#include <algorithm>
	#include <vector>
	std::vector<int> a = {1, 3, 5};
    	std::vector<int> b = {2, 4, 6};
    	std::vector<int> result(a.size() + b.size());
	std::merge(a.begin(), a.end(), b.begin(), b.end(), result.begin());
	
   	//Alternative method 

	Run a while loop which compares elements of both vectors and then stores them in an new vector in a sorted manner. 
   	This loop end when atleast one of the two vectors is completely traversed. 
   	Now for the remaining elements of vectors make two new loops where at max only one will work(as at max only one have remaining elements). 

        Note:[Don't forget to make the new vector whose values will be copied and pasted back in our original vector.]    
	 
2. Remove Element :
	 
	Run a loop over the array and make a pointer (to newly assign values in our array). 
	Pointer assigns nums[pointer++]=nums[i] if nums[i]!=k (k is the value in the question to be removed from the array).
	For the remaining values you can have a loop and assigns them garbage values or just ignore them. 
	
	// Alternative Method 

	#include <vector>
	#include <algorithm> // for std::remove
	std::vector<int> vec = {1, 2, 3, 2, 4, 2};//std::remove(...) moves all elements not equal to 2 to the front and returns a new end iterator.
	vec.erase(std::remove(vec.begin(), vec.end(), 2), vec.end());//erase(...) removes the "leftover" elements from the vector's tail.

3. Remove Duplicates from Sorted Arrays :
	
	Do a loop over the array and make a pointer (to wait and newly assign only unique values in our array).
	Pointer assigns nums[++pointer]=nums[i] if nums[i]!=nums[pointer] (i>=1).
	For the remaining values you can have a loop and assigns them garbage values or just ignore them.

4. Remove Duplicates from Sorted Arrays-2 :
	
	In the previous answer just add a cnt variable to store frequencies (It resets when new value comes).
	Do a loop over the array and make a pointer (to wait and newly assign values in our array till their frequencies<=2).
	Pointer assigns nums[++pointer]=nums[i] if nums[i]!=nums[pointer] (i>=1).
	For the remaining values you can have a loop and assigns them garbage values or just ignore them.

5. Majority Element :
	
	Make a map<int,int> and run a loop in array to store occurrence of values inside the array.
	Now run a new loop in map to check if some key has value >= floor(array.size()/2).

	//Alternative Method (Moore's Voting Algorithm)

	The intuition behind the Moore's Voting Algorithm is based on the fact that if there is a majority element in an array, 
	Then the (number of indexes at which majority element is present)-(number of indexes at it is not ) must be greater than zero.
	
	Make two variable named count=0; candidate=nums[0]; and run a loop over the given vector.
	If nums[i]==candidate cnt++ else cnt-- (We are basically removing those zones where there is no true majority (>(n/2)))
	When cnt becomes 0 , take the next indexed element as candidate and continue.
	When the loop ends, we will be left with a candidate and cnt will be positive .
	Now we will check by running a loop and check for its frequency.   
 	If candidate is not majority i.e. it is just a majority in our last working zone then no majority element exists in array.
	
	//Alternative Method (Using Sorting)

	The intuition behind this approach is that if an element occurs more than n/2 times in the array, 
	It will always occupy the middle position when the array is sorted. Why?
	Therefore, we can sort the array and return the element at index n/2. 

	Why? {Let say none of it's occurrence is at center, 
	then that means all of its occurrence will be at either left or right side of middle,
	then at max only n/2 indexes will be there on either side but it has more occurrence,
	so some of it's occurrence will be at middle} 

	Note:[Similar Algorithm to Moore's Voting Algorithm can be constructed if asked for more than n/3 occurrence,
	if more than n/i (i>3) is asked then using map is best to avoid complexity and non readability of code]
 
6. Rotate Array :
	
	First take modulo of numbers of rotation w.r.t. n {Rotation by n steps will result in same array | Here n is size of array}. 
	Now use reverse STL .
	reverse(nums.begin(), nums.end());
	reverse(nums.begin(), nums.begin() + k);
	reverse(nums.begin() + k, nums.end());
	Think about it and visualize why it works ? 
	
7. Best Time to Buy and Sell Stock :
	
	mini=prices[0]; //To store minimum stock price (initialised with prices[0])  
	diff=prices[i]-mini; // To calculate Temporary profit 
	maxdiff=max(maxdiff,diff); // To store maximum profit
	We will use above three variables and will run a loop over the vector, if prices[i]>mini then profit calculations else mini updated.
	Basically we are comparing profits with max stored one while simultaneously minimizing mini. 
	
8. Best Time to Buy and Sell Stock-2 :
	
	Here we have to get all small-small profits in order to maximise ours so we will define a profit=0 (all profits added in it)
	and a bought=prices[0] variable which stores bought price.
	We will run a loop over the vector and if (prices[i]-bought)>0 then add this to profit and update bought to prices[i];
	else also update bought to prices[i] as prices[i] is lesser so now we will make more profit if we purchase and sell from that price.
	In the else case we purchased and sold stocks on same day (day related to bought value not the i day) so zero profit.       

9. Jump Game :

	Forward Iterations o(N):
	
		We will run a loop over the vector and use maxi=0; //To know at max where we can reach now
		If at any point i(index of vector)>maxi then break;
		else maxi=max(maxi,i+nums[i]);//we can go till next nums[i] from i so added both.
		if maxi>=n-1 we have reached the end.

	Backward Iterations o(N):

		We will use Two variables current (stores index at which we have reached starting from last;
		initialised with n-1) and value=(current-j) //distance between points.    
		If someone can reach the last index then he can reach all previous indexes.
		We will do backward iterations and check at each index whether someone can reach it or not, if not then break.
		If nums[i]>value then current=j else nothing.
		At end we will check does current reaches 0 or not. 
	
10. Jump Game-2 : 
		
	Greedy [o(n), Why?]:

		Intuition :- Suppose you are at index i. From there, you can jump up to nums[i] steps. 
		You look ahead and choose the best index j in range [i+1, i+nums[i]] such that,
		it allows you to reach farthest in the next jump (nums[j] + j is maximized).			
		Then jump to j and repeat until you reach or cross the last index.

		Code :- 

		int jump(vector<int>& nums){
			int count = 0;			//counter of number of steps 
			int i = 0;			//index
			while(i<nums.size()-1){
            			int size = nums[i];	//maximum steps you can take
            			if(i+size >= nums.size()-1){
                			count++;
                			return count;	//our search is complete so return
            			}
            			int maxi = nums[i+1]+i;	//the max reach from one of the next jump positions
            			int j = i+1;
          			int ans = i+1;		//stores the best index to jump to
           			while(j<=i+size && j!=(nums.size()-1)){
                			if(j<nums.size() && maxi<=nums[j]+j){
                    				maxi = nums[j]+j;
                    				ans = j;//This is the greedy step.
                			}
               				 j++;
            			}
          			i = ans;		//Jump to the chosen best index ans
            			count++;		//Increment your jump count
        		}      
        		return count;	
		}
	
		Why?{o(n+n)=o(n),despite nested loops it is not o(n**2) as in inner loop j never comes back so each element traversed once in total.}

	Backward Greedy [less efficient, in worst case o(n**2)]:

		Intuition :- Can I jump to the current target from some earlier index? Yes? 
	        Then that earlier index becomes my new target, and I repeat.
		
		Code :- 
		
		int jump(vector<int>& nums) {
        		int cnt=0;			 //number of jumps made
        		int current=nums.size()-1;	 //starts at last index as the idea is to work backwards from the goal
        		for(int i=0;i<current;i++){
            			if((current-i)<=nums[i]){//Is it possible to jump from index i to current
               				cnt++;
                			current=i;	 //Move the target backward to i, because now you want to find a way to reach i
                			i=-1;		 //Reset the loop with i = -1 so that after i++ in the loop, it starts again from 0
            			}
        		}
        		return cnt ;
    		}	

